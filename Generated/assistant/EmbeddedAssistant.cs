// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/assistant/embedded/v1alpha2/embedded_assistant.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Assistant.Embedded.V1Alpha2 {

  /// <summary>Holder for reflection information generated from google/assistant/embedded/v1alpha2/embedded_assistant.proto</summary>
  public static partial class EmbeddedAssistantReflection {

    #region Descriptor
    /// <summary>File descriptor for google/assistant/embedded/v1alpha2/embedded_assistant.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EmbeddedAssistantReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjtnb29nbGUvYXNzaXN0YW50L2VtYmVkZGVkL3YxYWxwaGEyL2VtYmVkZGVk",
            "X2Fzc2lzdGFudC5wcm90bxIiZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52",
            "MWFscGhhMhocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxoYZ29vZ2xl",
            "L3R5cGUvbGF0bG5nLnByb3RvIt0CCgxBc3Npc3RDb25maWcSTAoPYXVkaW9f",
            "aW5fY29uZmlnGAEgASgLMjEuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52",
            "MWFscGhhMi5BdWRpb0luQ29uZmlnSAASFAoKdGV4dF9xdWVyeRgGIAEoCUgA",
            "EkwKEGF1ZGlvX291dF9jb25maWcYAiABKAsyMi5nb29nbGUuYXNzaXN0YW50",
            "LmVtYmVkZGVkLnYxYWxwaGEyLkF1ZGlvT3V0Q29uZmlnEkoKD2RpYWxvZ19z",
            "dGF0ZV9pbhgDIAEoCzIxLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFh",
            "bHBoYTIuRGlhbG9nU3RhdGVJbhJHCg1kZXZpY2VfY29uZmlnGAQgASgLMjAu",
            "Z29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5EZXZpY2VDb25m",
            "aWdCBgoEdHlwZSK2AQoNQXVkaW9JbkNvbmZpZxJMCghlbmNvZGluZxgBIAEo",
            "DjI6Lmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuQXVkaW9J",
            "bkNvbmZpZy5FbmNvZGluZxIZChFzYW1wbGVfcmF0ZV9oZXJ0ehgCIAEoBSI8",
            "CghFbmNvZGluZxIYChRFTkNPRElOR19VTlNQRUNJRklFRBAAEgwKCExJTkVB",
            "UjE2EAESCAoERkxBQxACIuMBCg5BdWRpb091dENvbmZpZxJNCghlbmNvZGlu",
            "ZxgBIAEoDjI7Lmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIu",
            "QXVkaW9PdXRDb25maWcuRW5jb2RpbmcSGQoRc2FtcGxlX3JhdGVfaGVydHoY",
            "AiABKAUSGQoRdm9sdW1lX3BlcmNlbnRhZ2UYAyABKAUiTAoIRW5jb2RpbmcS",
            "GAoURU5DT0RJTkdfVU5TUEVDSUZJRUQQABIMCghMSU5FQVIxNhABEgcKA01Q",
            "MxACEg8KC09QVVNfSU5fT0dHEAMijwEKDURpYWxvZ1N0YXRlSW4SGgoSY29u",
            "dmVyc2F0aW9uX3N0YXRlGAEgASgMEhUKDWxhbmd1YWdlX2NvZGUYAiABKAkS",
            "SwoPZGV2aWNlX2xvY2F0aW9uGAUgASgLMjIuZ29vZ2xlLmFzc2lzdGFudC5l",
            "bWJlZGRlZC52MWFscGhhMi5EZXZpY2VMb2NhdGlvbiIeCghBdWRpb091dBIS",
            "CgphdWRpb19kYXRhGAEgASgMIqUCCg5EaWFsb2dTdGF0ZU91dBIhChlzdXBw",
            "bGVtZW50YWxfZGlzcGxheV90ZXh0GAEgASgJEhoKEmNvbnZlcnNhdGlvbl9z",
            "dGF0ZRgCIAEoDBJaCg9taWNyb3Bob25lX21vZGUYAyABKA4yQS5nb29nbGUu",
            "YXNzaXN0YW50LmVtYmVkZGVkLnYxYWxwaGEyLkRpYWxvZ1N0YXRlT3V0Lk1p",
            "Y3JvcGhvbmVNb2RlEhkKEXZvbHVtZV9wZXJjZW50YWdlGAQgASgFIl0KDk1p",
            "Y3JvcGhvbmVNb2RlEh8KG01JQ1JPUEhPTkVfTU9ERV9VTlNQRUNJRklFRBAA",
            "EhQKEENMT1NFX01JQ1JPUEhPTkUQARIUChBESUFMT0dfRk9MTE9XX09OEAIi",
            "bwoNQXNzaXN0UmVxdWVzdBJCCgZjb25maWcYASABKAsyMC5nb29nbGUuYXNz",
            "aXN0YW50LmVtYmVkZGVkLnYxYWxwaGEyLkFzc2lzdENvbmZpZ0gAEhIKCGF1",
            "ZGlvX2luGAIgASgMSABCBgoEdHlwZSLOAwoOQXNzaXN0UmVzcG9uc2USUAoK",
            "ZXZlbnRfdHlwZRgBIAEoDjI8Lmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQu",
            "djFhbHBoYTIuQXNzaXN0UmVzcG9uc2UuRXZlbnRUeXBlEj8KCWF1ZGlvX291",
            "dBgDIAEoCzIsLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIu",
            "QXVkaW9PdXQSRwoNZGV2aWNlX2FjdGlvbhgGIAEoCzIwLmdvb2dsZS5hc3Np",
            "c3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuRGV2aWNlQWN0aW9uElMKDnNwZWVj",
            "aF9yZXN1bHRzGAIgAygLMjsuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52",
            "MWFscGhhMi5TcGVlY2hSZWNvZ25pdGlvblJlc3VsdBJMChBkaWFsb2dfc3Rh",
            "dGVfb3V0GAUgASgLMjIuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFs",
            "cGhhMi5EaWFsb2dTdGF0ZU91dCI9CglFdmVudFR5cGUSGgoWRVZFTlRfVFlQ",
            "RV9VTlNQRUNJRklFRBAAEhQKEEVORF9PRl9VVFRFUkFOQ0UQASJAChdTcGVl",
            "Y2hSZWNvZ25pdGlvblJlc3VsdBISCgp0cmFuc2NyaXB0GAEgASgJEhEKCXN0",
            "YWJpbGl0eRgCIAEoAiI6CgxEZXZpY2VDb25maWcSEQoJZGV2aWNlX2lkGAEg",
            "ASgJEhcKD2RldmljZV9tb2RlbF9pZBgDIAEoCSIrCgxEZXZpY2VBY3Rpb24S",
            "GwoTZGV2aWNlX3JlcXVlc3RfanNvbhgBIAEoCSJECg5EZXZpY2VMb2NhdGlv",
            "bhIqCgtjb29yZGluYXRlcxgBIAEoCzITLmdvb2dsZS50eXBlLkxhdExuZ0gA",
            "QgYKBHR5cGUyiAEKEUVtYmVkZGVkQXNzaXN0YW50EnMKBkFzc2lzdBIxLmdv",
            "b2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuQXNzaXN0UmVxdWVz",
            "dBoyLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuQXNzaXN0",
            "UmVzcG9uc2UoATABQoYBCiZjb20uZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRl",
            "ZC52MWFscGhhMkIOQXNzaXN0YW50UHJvdG9QAVpKZ29vZ2xlLmdvbGFuZy5v",
            "cmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9hc3Npc3RhbnQvZW1iZWRkZWQvdjFh",
            "bHBoYTI7ZW1iZWRkZWRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Type.LatlngReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.AssistConfig), global::Google.Assistant.Embedded.V1Alpha2.AssistConfig.Parser, new[]{ "AudioInConfig", "TextQuery", "AudioOutConfig", "DialogStateIn", "DeviceConfig" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig), global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig.Parser, new[]{ "Encoding", "SampleRateHertz" }, null, new[]{ typeof(global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig.Types.Encoding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig), global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig.Parser, new[]{ "Encoding", "SampleRateHertz", "VolumePercentage" }, null, new[]{ typeof(global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig.Types.Encoding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.DialogStateIn), global::Google.Assistant.Embedded.V1Alpha2.DialogStateIn.Parser, new[]{ "ConversationState", "LanguageCode", "DeviceLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.AudioOut), global::Google.Assistant.Embedded.V1Alpha2.AudioOut.Parser, new[]{ "AudioData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut), global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut.Parser, new[]{ "SupplementalDisplayText", "ConversationState", "MicrophoneMode", "VolumePercentage" }, null, new[]{ typeof(global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut.Types.MicrophoneMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.AssistRequest), global::Google.Assistant.Embedded.V1Alpha2.AssistRequest.Parser, new[]{ "Config", "AudioIn" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.AssistResponse), global::Google.Assistant.Embedded.V1Alpha2.AssistResponse.Parser, new[]{ "EventType", "AudioOut", "DeviceAction", "SpeechResults", "DialogStateOut" }, null, new[]{ typeof(global::Google.Assistant.Embedded.V1Alpha2.AssistResponse.Types.EventType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult), global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult.Parser, new[]{ "Transcript", "Stability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.DeviceConfig), global::Google.Assistant.Embedded.V1Alpha2.DeviceConfig.Parser, new[]{ "DeviceId", "DeviceModelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.DeviceAction), global::Google.Assistant.Embedded.V1Alpha2.DeviceAction.Parser, new[]{ "DeviceRequestJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Assistant.Embedded.V1Alpha2.DeviceLocation), global::Google.Assistant.Embedded.V1Alpha2.DeviceLocation.Parser, new[]{ "Coordinates" }, new[]{ "Type" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Specifies how to process the `AssistRequest` messages.
  /// </summary>
  public sealed partial class AssistConfig : pb::IMessage<AssistConfig> {
    private static readonly pb::MessageParser<AssistConfig> _parser = new pb::MessageParser<AssistConfig>(() => new AssistConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssistConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistConfig(AssistConfig other) : this() {
      AudioOutConfig = other.audioOutConfig_ != null ? other.AudioOutConfig.Clone() : null;
      DialogStateIn = other.dialogStateIn_ != null ? other.DialogStateIn.Clone() : null;
      DeviceConfig = other.deviceConfig_ != null ? other.DeviceConfig.Clone() : null;
      switch (other.TypeCase) {
        case TypeOneofCase.AudioInConfig:
          AudioInConfig = other.AudioInConfig.Clone();
          break;
        case TypeOneofCase.TextQuery:
          TextQuery = other.TextQuery;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistConfig Clone() {
      return new AssistConfig(this);
    }

    /// <summary>Field number for the "audio_in_config" field.</summary>
    public const int AudioInConfigFieldNumber = 1;
    /// <summary>
    /// Specifies how to process the subsequent incoming audio. Required if
    /// [AssistRequest.audio_in][google.assistant.embedded.v1alpha2.AssistRequest.audio_in] bytes will be provided in subsequent requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig AudioInConfig {
      get { return typeCase_ == TypeOneofCase.AudioInConfig ? (global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.AudioInConfig;
      }
    }

    /// <summary>Field number for the "text_query" field.</summary>
    public const int TextQueryFieldNumber = 6;
    /// <summary>
    /// The text input to be sent to the Assistant. This can be populated from a
    /// text interface if audio input is not available.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextQuery {
      get { return typeCase_ == TypeOneofCase.TextQuery ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.TextQuery;
      }
    }

    /// <summary>Field number for the "audio_out_config" field.</summary>
    public const int AudioOutConfigFieldNumber = 2;
    private global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig audioOutConfig_;
    /// <summary>
    /// *Required* Specifies how to format the audio that will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig AudioOutConfig {
      get { return audioOutConfig_; }
      set {
        audioOutConfig_ = value;
      }
    }

    /// <summary>Field number for the "dialog_state_in" field.</summary>
    public const int DialogStateInFieldNumber = 3;
    private global::Google.Assistant.Embedded.V1Alpha2.DialogStateIn dialogStateIn_;
    /// <summary>
    /// *Required* Represents the current dialog state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.DialogStateIn DialogStateIn {
      get { return dialogStateIn_; }
      set {
        dialogStateIn_ = value;
      }
    }

    /// <summary>Field number for the "device_config" field.</summary>
    public const int DeviceConfigFieldNumber = 4;
    private global::Google.Assistant.Embedded.V1Alpha2.DeviceConfig deviceConfig_;
    /// <summary>
    /// Device configuration that uniquely identifies a specific device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.DeviceConfig DeviceConfig {
      get { return deviceConfig_; }
      set {
        deviceConfig_ = value;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      AudioInConfig = 1,
      TextQuery = 6,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssistConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssistConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AudioInConfig, other.AudioInConfig)) return false;
      if (TextQuery != other.TextQuery) return false;
      if (!object.Equals(AudioOutConfig, other.AudioOutConfig)) return false;
      if (!object.Equals(DialogStateIn, other.DialogStateIn)) return false;
      if (!object.Equals(DeviceConfig, other.DeviceConfig)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.AudioInConfig) hash ^= AudioInConfig.GetHashCode();
      if (typeCase_ == TypeOneofCase.TextQuery) hash ^= TextQuery.GetHashCode();
      if (audioOutConfig_ != null) hash ^= AudioOutConfig.GetHashCode();
      if (dialogStateIn_ != null) hash ^= DialogStateIn.GetHashCode();
      if (deviceConfig_ != null) hash ^= DeviceConfig.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.AudioInConfig) {
        output.WriteRawTag(10);
        output.WriteMessage(AudioInConfig);
      }
      if (audioOutConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AudioOutConfig);
      }
      if (dialogStateIn_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DialogStateIn);
      }
      if (deviceConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DeviceConfig);
      }
      if (typeCase_ == TypeOneofCase.TextQuery) {
        output.WriteRawTag(50);
        output.WriteString(TextQuery);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.AudioInConfig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioInConfig);
      }
      if (typeCase_ == TypeOneofCase.TextQuery) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextQuery);
      }
      if (audioOutConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioOutConfig);
      }
      if (dialogStateIn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DialogStateIn);
      }
      if (deviceConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceConfig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssistConfig other) {
      if (other == null) {
        return;
      }
      if (other.audioOutConfig_ != null) {
        if (audioOutConfig_ == null) {
          audioOutConfig_ = new global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig();
        }
        AudioOutConfig.MergeFrom(other.AudioOutConfig);
      }
      if (other.dialogStateIn_ != null) {
        if (dialogStateIn_ == null) {
          dialogStateIn_ = new global::Google.Assistant.Embedded.V1Alpha2.DialogStateIn();
        }
        DialogStateIn.MergeFrom(other.DialogStateIn);
      }
      if (other.deviceConfig_ != null) {
        if (deviceConfig_ == null) {
          deviceConfig_ = new global::Google.Assistant.Embedded.V1Alpha2.DeviceConfig();
        }
        DeviceConfig.MergeFrom(other.DeviceConfig);
      }
      switch (other.TypeCase) {
        case TypeOneofCase.AudioInConfig:
          if (AudioInConfig == null) {
            AudioInConfig = new global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig();
          }
          AudioInConfig.MergeFrom(other.AudioInConfig);
          break;
        case TypeOneofCase.TextQuery:
          TextQuery = other.TextQuery;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig subBuilder = new global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig();
            if (typeCase_ == TypeOneofCase.AudioInConfig) {
              subBuilder.MergeFrom(AudioInConfig);
            }
            input.ReadMessage(subBuilder);
            AudioInConfig = subBuilder;
            break;
          }
          case 18: {
            if (audioOutConfig_ == null) {
              audioOutConfig_ = new global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig();
            }
            input.ReadMessage(audioOutConfig_);
            break;
          }
          case 26: {
            if (dialogStateIn_ == null) {
              dialogStateIn_ = new global::Google.Assistant.Embedded.V1Alpha2.DialogStateIn();
            }
            input.ReadMessage(dialogStateIn_);
            break;
          }
          case 34: {
            if (deviceConfig_ == null) {
              deviceConfig_ = new global::Google.Assistant.Embedded.V1Alpha2.DeviceConfig();
            }
            input.ReadMessage(deviceConfig_);
            break;
          }
          case 50: {
            TextQuery = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies how to process the `audio_in` data that will be provided in
  /// subsequent requests. For recommended settings, see the Google Assistant SDK
  /// [best practices](https://developers.google.com/assistant/sdk/guides/service/python/best-practices/audio).
  /// </summary>
  public sealed partial class AudioInConfig : pb::IMessage<AudioInConfig> {
    private static readonly pb::MessageParser<AudioInConfig> _parser = new pb::MessageParser<AudioInConfig>(() => new AudioInConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioInConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioInConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioInConfig(AudioInConfig other) : this() {
      encoding_ = other.encoding_;
      sampleRateHertz_ = other.sampleRateHertz_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioInConfig Clone() {
      return new AudioInConfig(this);
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 1;
    private global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig.Types.Encoding encoding_ = 0;
    /// <summary>
    /// *Required* Encoding of audio data sent in all `audio_in` messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig.Types.Encoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "sample_rate_hertz" field.</summary>
    public const int SampleRateHertzFieldNumber = 2;
    private int sampleRateHertz_;
    /// <summary>
    /// *Required* Sample rate (in Hertz) of the audio data sent in all `audio_in`
    /// messages. Valid values are from 16000-24000, but 16000 is optimal.
    /// For best results, set the sampling rate of the audio source to 16000 Hz.
    /// If that's not possible, use the native sample rate of the audio source
    /// (instead of re-sampling).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleRateHertz {
      get { return sampleRateHertz_; }
      set {
        sampleRateHertz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioInConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioInConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Encoding != other.Encoding) return false;
      if (SampleRateHertz != other.SampleRateHertz) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (SampleRateHertz != 0) hash ^= SampleRateHertz.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Encoding != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Encoding);
      }
      if (SampleRateHertz != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SampleRateHertz);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (SampleRateHertz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SampleRateHertz);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioInConfig other) {
      if (other == null) {
        return;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.SampleRateHertz != 0) {
        SampleRateHertz = other.SampleRateHertz;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            encoding_ = (global::Google.Assistant.Embedded.V1Alpha2.AudioInConfig.Types.Encoding) input.ReadEnum();
            break;
          }
          case 16: {
            SampleRateHertz = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AudioInConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Audio encoding of the data sent in the audio message.
      /// Audio must be one-channel (mono). The only language supported is "en-US".
      /// </summary>
      public enum Encoding {
        /// <summary>
        /// Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
        /// </summary>
        [pbr::OriginalName("ENCODING_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
        /// This encoding includes no header, only the raw audio bytes.
        /// </summary>
        [pbr::OriginalName("LINEAR16")] Linear16 = 1,
        /// <summary>
        /// [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
        /// Codec) is the recommended encoding because it is
        /// lossless--therefore recognition is not compromised--and
        /// requires only about half the bandwidth of `LINEAR16`. This encoding
        /// includes the `FLAC` stream header followed by audio data. It supports
        /// 16-bit and 24-bit samples, however, not all fields in `STREAMINFO` are
        /// supported.
        /// </summary>
        [pbr::OriginalName("FLAC")] Flac = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Specifies the desired format for the server to use when it returns
  /// `audio_out` messages.
  /// </summary>
  public sealed partial class AudioOutConfig : pb::IMessage<AudioOutConfig> {
    private static readonly pb::MessageParser<AudioOutConfig> _parser = new pb::MessageParser<AudioOutConfig>(() => new AudioOutConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioOutConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioOutConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioOutConfig(AudioOutConfig other) : this() {
      encoding_ = other.encoding_;
      sampleRateHertz_ = other.sampleRateHertz_;
      volumePercentage_ = other.volumePercentage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioOutConfig Clone() {
      return new AudioOutConfig(this);
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 1;
    private global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig.Types.Encoding encoding_ = 0;
    /// <summary>
    /// *Required* The encoding of audio data to be returned in all `audio_out`
    /// messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig.Types.Encoding Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "sample_rate_hertz" field.</summary>
    public const int SampleRateHertzFieldNumber = 2;
    private int sampleRateHertz_;
    /// <summary>
    /// *Required* The sample rate in Hertz of the audio data returned in
    /// `audio_out` messages. Valid values are: 16000-24000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SampleRateHertz {
      get { return sampleRateHertz_; }
      set {
        sampleRateHertz_ = value;
      }
    }

    /// <summary>Field number for the "volume_percentage" field.</summary>
    public const int VolumePercentageFieldNumber = 3;
    private int volumePercentage_;
    /// <summary>
    /// *Required* Current volume setting of the device's audio output.
    /// Valid values are 1 to 100 (corresponding to 1% to 100%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumePercentage {
      get { return volumePercentage_; }
      set {
        volumePercentage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioOutConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioOutConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Encoding != other.Encoding) return false;
      if (SampleRateHertz != other.SampleRateHertz) return false;
      if (VolumePercentage != other.VolumePercentage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      if (SampleRateHertz != 0) hash ^= SampleRateHertz.GetHashCode();
      if (VolumePercentage != 0) hash ^= VolumePercentage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Encoding != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Encoding);
      }
      if (SampleRateHertz != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SampleRateHertz);
      }
      if (VolumePercentage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(VolumePercentage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoding);
      }
      if (SampleRateHertz != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SampleRateHertz);
      }
      if (VolumePercentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumePercentage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioOutConfig other) {
      if (other == null) {
        return;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      if (other.SampleRateHertz != 0) {
        SampleRateHertz = other.SampleRateHertz;
      }
      if (other.VolumePercentage != 0) {
        VolumePercentage = other.VolumePercentage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            encoding_ = (global::Google.Assistant.Embedded.V1Alpha2.AudioOutConfig.Types.Encoding) input.ReadEnum();
            break;
          }
          case 16: {
            SampleRateHertz = input.ReadInt32();
            break;
          }
          case 24: {
            VolumePercentage = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AudioOutConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Audio encoding of the data returned in the audio message. All encodings are
      /// raw audio bytes with no header, except as indicated below.
      /// </summary>
      public enum Encoding {
        /// <summary>
        /// Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
        /// </summary>
        [pbr::OriginalName("ENCODING_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
        /// </summary>
        [pbr::OriginalName("LINEAR16")] Linear16 = 1,
        /// <summary>
        /// MP3 audio encoding. The sample rate is encoded in the payload.
        /// </summary>
        [pbr::OriginalName("MP3")] Mp3 = 2,
        /// <summary>
        /// Opus-encoded audio wrapped in an ogg container. The result will be a
        /// file which can be played natively on Android and in some browsers (such
        /// as Chrome). The quality of the encoding is considerably higher than MP3
        /// while using the same bitrate. The sample rate is encoded in the payload.
        /// </summary>
        [pbr::OriginalName("OPUS_IN_OGG")] OpusInOgg = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Provides information about the current dialog state.
  /// </summary>
  public sealed partial class DialogStateIn : pb::IMessage<DialogStateIn> {
    private static readonly pb::MessageParser<DialogStateIn> _parser = new pb::MessageParser<DialogStateIn>(() => new DialogStateIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DialogStateIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogStateIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogStateIn(DialogStateIn other) : this() {
      conversationState_ = other.conversationState_;
      languageCode_ = other.languageCode_;
      DeviceLocation = other.deviceLocation_ != null ? other.DeviceLocation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogStateIn Clone() {
      return new DialogStateIn(this);
    }

    /// <summary>Field number for the "conversation_state" field.</summary>
    public const int ConversationStateFieldNumber = 1;
    private pb::ByteString conversationState_ = pb::ByteString.Empty;
    /// <summary>
    /// *Required* This field must always be set to the
    /// [DialogStateOut.conversation_state][google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state] value that was returned in the prior
    /// `Assist` RPC. It should only be omitted (field not set) if there was no
    /// prior `Assist` RPC because this is the first `Assist` RPC made by this
    /// device after it was first setup and/or a factory-default reset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConversationState {
      get { return conversationState_; }
      set {
        conversationState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 2;
    private string languageCode_ = "";
    /// <summary>
    /// *Required* Language of the request in
    /// [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47). For example:
    /// "en-US". If you have selected a language for this `device_id` using the
    /// [Settings](https://developers.google.com/assistant/sdk/guides/assistant-settings)
    /// menu in your phone's Google Assistant app, that selection will override
    /// this value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageCode {
      get { return languageCode_; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_location" field.</summary>
    public const int DeviceLocationFieldNumber = 5;
    private global::Google.Assistant.Embedded.V1Alpha2.DeviceLocation deviceLocation_;
    /// <summary>
    /// *Optional* Location of the device where the query originated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.DeviceLocation DeviceLocation {
      get { return deviceLocation_; }
      set {
        deviceLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DialogStateIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DialogStateIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConversationState != other.ConversationState) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (!object.Equals(DeviceLocation, other.DeviceLocation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConversationState.Length != 0) hash ^= ConversationState.GetHashCode();
      if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
      if (deviceLocation_ != null) hash ^= DeviceLocation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConversationState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ConversationState);
      }
      if (LanguageCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LanguageCode);
      }
      if (deviceLocation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DeviceLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConversationState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConversationState);
      }
      if (LanguageCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (deviceLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DialogStateIn other) {
      if (other == null) {
        return;
      }
      if (other.ConversationState.Length != 0) {
        ConversationState = other.ConversationState;
      }
      if (other.LanguageCode.Length != 0) {
        LanguageCode = other.LanguageCode;
      }
      if (other.deviceLocation_ != null) {
        if (deviceLocation_ == null) {
          deviceLocation_ = new global::Google.Assistant.Embedded.V1Alpha2.DeviceLocation();
        }
        DeviceLocation.MergeFrom(other.DeviceLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ConversationState = input.ReadBytes();
            break;
          }
          case 18: {
            LanguageCode = input.ReadString();
            break;
          }
          case 42: {
            if (deviceLocation_ == null) {
              deviceLocation_ = new global::Google.Assistant.Embedded.V1Alpha2.DeviceLocation();
            }
            input.ReadMessage(deviceLocation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The audio containing the Assistant's response to the query. Sequential chunks
  /// of audio data are received in sequential `AssistResponse` messages.
  /// </summary>
  public sealed partial class AudioOut : pb::IMessage<AudioOut> {
    private static readonly pb::MessageParser<AudioOut> _parser = new pb::MessageParser<AudioOut>(() => new AudioOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioOut(AudioOut other) : this() {
      audioData_ = other.audioData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioOut Clone() {
      return new AudioOut(this);
    }

    /// <summary>Field number for the "audio_data" field.</summary>
    public const int AudioDataFieldNumber = 1;
    private pb::ByteString audioData_ = pb::ByteString.Empty;
    /// <summary>
    /// *Output-only* The audio data containing the Assistant's response to the
    /// query. Sequential chunks of audio data are received in sequential
    /// `AssistResponse` messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AudioData {
      get { return audioData_; }
      set {
        audioData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AudioData != other.AudioData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AudioData.Length != 0) hash ^= AudioData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AudioData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AudioData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AudioData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AudioData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioOut other) {
      if (other == null) {
        return;
      }
      if (other.AudioData.Length != 0) {
        AudioData = other.AudioData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AudioData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The dialog state resulting from the user's query. Multiple of these messages
  /// may be received.
  /// </summary>
  public sealed partial class DialogStateOut : pb::IMessage<DialogStateOut> {
    private static readonly pb::MessageParser<DialogStateOut> _parser = new pb::MessageParser<DialogStateOut>(() => new DialogStateOut());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DialogStateOut> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogStateOut() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogStateOut(DialogStateOut other) : this() {
      supplementalDisplayText_ = other.supplementalDisplayText_;
      conversationState_ = other.conversationState_;
      microphoneMode_ = other.microphoneMode_;
      volumePercentage_ = other.volumePercentage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DialogStateOut Clone() {
      return new DialogStateOut(this);
    }

    /// <summary>Field number for the "supplemental_display_text" field.</summary>
    public const int SupplementalDisplayTextFieldNumber = 1;
    private string supplementalDisplayText_ = "";
    /// <summary>
    /// *Output-only* Supplemental display text from the Assistant. This could be
    /// the same as the speech spoken in `AssistResponse.audio_out` or it could
    /// be some additional information which aids the user's understanding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SupplementalDisplayText {
      get { return supplementalDisplayText_; }
      set {
        supplementalDisplayText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "conversation_state" field.</summary>
    public const int ConversationStateFieldNumber = 2;
    private pb::ByteString conversationState_ = pb::ByteString.Empty;
    /// <summary>
    /// *Output-only* State information for the subsequent `Assist` RPC. This
    /// value should be saved in the client and returned in the
    /// [`DialogStateIn.conversation_state`](#dialogstatein) field with the next
    /// `Assist` RPC. (The client does not need to interpret or otherwise use this
    /// value.) This information should be saved across device reboots. However,
    /// this value should be cleared (not saved in the client) during a
    /// factory-default reset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConversationState {
      get { return conversationState_; }
      set {
        conversationState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "microphone_mode" field.</summary>
    public const int MicrophoneModeFieldNumber = 3;
    private global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut.Types.MicrophoneMode microphoneMode_ = 0;
    /// <summary>
    /// *Output-only* Specifies the mode of the microphone after this `Assist`
    /// RPC is processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut.Types.MicrophoneMode MicrophoneMode {
      get { return microphoneMode_; }
      set {
        microphoneMode_ = value;
      }
    }

    /// <summary>Field number for the "volume_percentage" field.</summary>
    public const int VolumePercentageFieldNumber = 4;
    private int volumePercentage_;
    /// <summary>
    /// *Output-only* Updated volume level. The value will be 0 or omitted
    /// (indicating no change) unless a voice command such as *Increase the volume*
    /// or *Set volume level 4* was recognized, in which case the value will be
    /// between 1 and 100 (corresponding to the new volume level of 1% to 100%).
    /// Typically, a client should use this volume level when playing the
    /// `audio_out` data, and retain this value as the current volume level and
    /// supply it in the `AudioOutConfig` of the next `AssistRequest`. (Some
    /// clients may also implement other ways to allow the current volume level to
    /// be changed, for example, by providing a knob that the user can turn.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VolumePercentage {
      get { return volumePercentage_; }
      set {
        volumePercentage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DialogStateOut);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DialogStateOut other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SupplementalDisplayText != other.SupplementalDisplayText) return false;
      if (ConversationState != other.ConversationState) return false;
      if (MicrophoneMode != other.MicrophoneMode) return false;
      if (VolumePercentage != other.VolumePercentage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SupplementalDisplayText.Length != 0) hash ^= SupplementalDisplayText.GetHashCode();
      if (ConversationState.Length != 0) hash ^= ConversationState.GetHashCode();
      if (MicrophoneMode != 0) hash ^= MicrophoneMode.GetHashCode();
      if (VolumePercentage != 0) hash ^= VolumePercentage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SupplementalDisplayText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SupplementalDisplayText);
      }
      if (ConversationState.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ConversationState);
      }
      if (MicrophoneMode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MicrophoneMode);
      }
      if (VolumePercentage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(VolumePercentage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SupplementalDisplayText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SupplementalDisplayText);
      }
      if (ConversationState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConversationState);
      }
      if (MicrophoneMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MicrophoneMode);
      }
      if (VolumePercentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumePercentage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DialogStateOut other) {
      if (other == null) {
        return;
      }
      if (other.SupplementalDisplayText.Length != 0) {
        SupplementalDisplayText = other.SupplementalDisplayText;
      }
      if (other.ConversationState.Length != 0) {
        ConversationState = other.ConversationState;
      }
      if (other.MicrophoneMode != 0) {
        MicrophoneMode = other.MicrophoneMode;
      }
      if (other.VolumePercentage != 0) {
        VolumePercentage = other.VolumePercentage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SupplementalDisplayText = input.ReadString();
            break;
          }
          case 18: {
            ConversationState = input.ReadBytes();
            break;
          }
          case 24: {
            microphoneMode_ = (global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut.Types.MicrophoneMode) input.ReadEnum();
            break;
          }
          case 32: {
            VolumePercentage = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DialogStateOut message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible states of the microphone after a `Assist` RPC completes.
      /// </summary>
      public enum MicrophoneMode {
        /// <summary>
        /// No mode specified.
        /// </summary>
        [pbr::OriginalName("MICROPHONE_MODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The service is not expecting a follow-on question from the user.
        /// The microphone should remain off until the user re-activates it.
        /// </summary>
        [pbr::OriginalName("CLOSE_MICROPHONE")] CloseMicrophone = 1,
        /// <summary>
        /// The service is expecting a follow-on question from the user. The
        /// microphone should be re-opened when the `AudioOut` playback completes
        /// (by starting a new `Assist` RPC call to send the new audio).
        /// </summary>
        [pbr::OriginalName("DIALOG_FOLLOW_ON")] DialogFollowOn = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// The top-level message sent by the client. Clients must send at least two, and
  /// typically numerous `AssistRequest` messages. The first message must
  /// contain a `config` message and must not contain `audio_in` data. All
  /// subsequent messages must contain `audio_in` data and must not contain a
  /// `config` message.
  /// </summary>
  public sealed partial class AssistRequest : pb::IMessage<AssistRequest> {
    private static readonly pb::MessageParser<AssistRequest> _parser = new pb::MessageParser<AssistRequest>(() => new AssistRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssistRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistRequest(AssistRequest other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Config:
          Config = other.Config.Clone();
          break;
        case TypeOneofCase.AudioIn:
          AudioIn = other.AudioIn;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistRequest Clone() {
      return new AssistRequest(this);
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 1;
    /// <summary>
    /// The `config` message provides information to the recognizer that
    /// specifies how to process the request.
    /// The first `AssistRequest` message must contain a `config` message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AssistConfig Config {
      get { return typeCase_ == TypeOneofCase.Config ? (global::Google.Assistant.Embedded.V1Alpha2.AssistConfig) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Config;
      }
    }

    /// <summary>Field number for the "audio_in" field.</summary>
    public const int AudioInFieldNumber = 2;
    /// <summary>
    /// The audio data to be recognized. Sequential chunks of audio data are sent
    /// in sequential `AssistRequest` messages. The first `AssistRequest`
    /// message must not contain `audio_in` data and all subsequent
    /// `AssistRequest` messages must contain `audio_in` data. The audio bytes
    /// must be encoded as specified in `AudioInConfig`.
    /// Audio must be sent at approximately real-time (16000 samples per second).
    /// An error will be returned if audio is sent significantly faster or
    /// slower.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AudioIn {
      get { return typeCase_ == TypeOneofCase.AudioIn ? (pb::ByteString) type_ : pb::ByteString.Empty; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.AudioIn;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Config = 1,
      AudioIn = 2,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssistRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssistRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Config, other.Config)) return false;
      if (AudioIn != other.AudioIn) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Config) hash ^= Config.GetHashCode();
      if (typeCase_ == TypeOneofCase.AudioIn) hash ^= AudioIn.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Config) {
        output.WriteRawTag(10);
        output.WriteMessage(Config);
      }
      if (typeCase_ == TypeOneofCase.AudioIn) {
        output.WriteRawTag(18);
        output.WriteBytes(AudioIn);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Config) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (typeCase_ == TypeOneofCase.AudioIn) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AudioIn);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssistRequest other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Config:
          if (Config == null) {
            Config = new global::Google.Assistant.Embedded.V1Alpha2.AssistConfig();
          }
          Config.MergeFrom(other.Config);
          break;
        case TypeOneofCase.AudioIn:
          AudioIn = other.AudioIn;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Assistant.Embedded.V1Alpha2.AssistConfig subBuilder = new global::Google.Assistant.Embedded.V1Alpha2.AssistConfig();
            if (typeCase_ == TypeOneofCase.Config) {
              subBuilder.MergeFrom(Config);
            }
            input.ReadMessage(subBuilder);
            Config = subBuilder;
            break;
          }
          case 18: {
            AudioIn = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The top-level message received by the client. A series of one or more
  /// `AssistResponse` messages are streamed back to the client.
  /// </summary>
  public sealed partial class AssistResponse : pb::IMessage<AssistResponse> {
    private static readonly pb::MessageParser<AssistResponse> _parser = new pb::MessageParser<AssistResponse>(() => new AssistResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssistResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistResponse(AssistResponse other) : this() {
      eventType_ = other.eventType_;
      AudioOut = other.audioOut_ != null ? other.AudioOut.Clone() : null;
      DeviceAction = other.deviceAction_ != null ? other.DeviceAction.Clone() : null;
      speechResults_ = other.speechResults_.Clone();
      DialogStateOut = other.dialogStateOut_ != null ? other.DialogStateOut.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssistResponse Clone() {
      return new AssistResponse(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::Google.Assistant.Embedded.V1Alpha2.AssistResponse.Types.EventType eventType_ = 0;
    /// <summary>
    /// *Output-only* Indicates the type of event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AssistResponse.Types.EventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "audio_out" field.</summary>
    public const int AudioOutFieldNumber = 3;
    private global::Google.Assistant.Embedded.V1Alpha2.AudioOut audioOut_;
    /// <summary>
    /// *Output-only* The audio containing the Assistant's response to the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.AudioOut AudioOut {
      get { return audioOut_; }
      set {
        audioOut_ = value;
      }
    }

    /// <summary>Field number for the "device_action" field.</summary>
    public const int DeviceActionFieldNumber = 6;
    private global::Google.Assistant.Embedded.V1Alpha2.DeviceAction deviceAction_;
    /// <summary>
    /// *Output-only* Contains the action triggered by the query with the
    /// appropriate payloads and semantic parsing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.DeviceAction DeviceAction {
      get { return deviceAction_; }
      set {
        deviceAction_ = value;
      }
    }

    /// <summary>Field number for the "speech_results" field.</summary>
    public const int SpeechResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult> _repeated_speechResults_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult> speechResults_ = new pbc::RepeatedField<global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult>();
    /// <summary>
    /// *Output-only* This repeated list contains zero or more speech recognition
    /// results that correspond to consecutive portions of the audio currently
    /// being processed, starting with the portion corresponding to the earliest
    /// audio (and most stable portion) to the portion corresponding to the most
    /// recent audio. The strings can be concatenated to view the full
    /// in-progress response. When the speech recognition completes, this list
    /// will contain one item with `stability` of `1.0`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Assistant.Embedded.V1Alpha2.SpeechRecognitionResult> SpeechResults {
      get { return speechResults_; }
    }

    /// <summary>Field number for the "dialog_state_out" field.</summary>
    public const int DialogStateOutFieldNumber = 5;
    private global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut dialogStateOut_;
    /// <summary>
    /// *Output-only* Contains output related to the user's query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut DialogStateOut {
      get { return dialogStateOut_; }
      set {
        dialogStateOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssistResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssistResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (!object.Equals(AudioOut, other.AudioOut)) return false;
      if (!object.Equals(DeviceAction, other.DeviceAction)) return false;
      if(!speechResults_.Equals(other.speechResults_)) return false;
      if (!object.Equals(DialogStateOut, other.DialogStateOut)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (audioOut_ != null) hash ^= AudioOut.GetHashCode();
      if (deviceAction_ != null) hash ^= DeviceAction.GetHashCode();
      hash ^= speechResults_.GetHashCode();
      if (dialogStateOut_ != null) hash ^= DialogStateOut.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      speechResults_.WriteTo(output, _repeated_speechResults_codec);
      if (audioOut_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AudioOut);
      }
      if (dialogStateOut_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DialogStateOut);
      }
      if (deviceAction_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeviceAction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (audioOut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AudioOut);
      }
      if (deviceAction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceAction);
      }
      size += speechResults_.CalculateSize(_repeated_speechResults_codec);
      if (dialogStateOut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DialogStateOut);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssistResponse other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.audioOut_ != null) {
        if (audioOut_ == null) {
          audioOut_ = new global::Google.Assistant.Embedded.V1Alpha2.AudioOut();
        }
        AudioOut.MergeFrom(other.AudioOut);
      }
      if (other.deviceAction_ != null) {
        if (deviceAction_ == null) {
          deviceAction_ = new global::Google.Assistant.Embedded.V1Alpha2.DeviceAction();
        }
        DeviceAction.MergeFrom(other.DeviceAction);
      }
      speechResults_.Add(other.speechResults_);
      if (other.dialogStateOut_ != null) {
        if (dialogStateOut_ == null) {
          dialogStateOut_ = new global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut();
        }
        DialogStateOut.MergeFrom(other.DialogStateOut);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            eventType_ = (global::Google.Assistant.Embedded.V1Alpha2.AssistResponse.Types.EventType) input.ReadEnum();
            break;
          }
          case 18: {
            speechResults_.AddEntriesFrom(input, _repeated_speechResults_codec);
            break;
          }
          case 26: {
            if (audioOut_ == null) {
              audioOut_ = new global::Google.Assistant.Embedded.V1Alpha2.AudioOut();
            }
            input.ReadMessage(audioOut_);
            break;
          }
          case 42: {
            if (dialogStateOut_ == null) {
              dialogStateOut_ = new global::Google.Assistant.Embedded.V1Alpha2.DialogStateOut();
            }
            input.ReadMessage(dialogStateOut_);
            break;
          }
          case 50: {
            if (deviceAction_ == null) {
              deviceAction_ = new global::Google.Assistant.Embedded.V1Alpha2.DeviceAction();
            }
            input.ReadMessage(deviceAction_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AssistResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Indicates the type of event.
      /// </summary>
      public enum EventType {
        /// <summary>
        /// No event specified.
        /// </summary>
        [pbr::OriginalName("EVENT_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// This event indicates that the server has detected the end of the user's
        /// speech utterance and expects no additional speech. Therefore, the server
        /// will not process additional audio (although it may subsequently return
        /// additional results). The client should stop sending additional audio
        /// data, half-close the gRPC connection, and wait for any additional results
        /// until the server closes the gRPC connection.
        /// </summary>
        [pbr::OriginalName("END_OF_UTTERANCE")] EndOfUtterance = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// The estimated transcription of a phrase the user has spoken. This could be
  /// a single segment or the full guess of the user's spoken query.
  /// </summary>
  public sealed partial class SpeechRecognitionResult : pb::IMessage<SpeechRecognitionResult> {
    private static readonly pb::MessageParser<SpeechRecognitionResult> _parser = new pb::MessageParser<SpeechRecognitionResult>(() => new SpeechRecognitionResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeechRecognitionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeechRecognitionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeechRecognitionResult(SpeechRecognitionResult other) : this() {
      transcript_ = other.transcript_;
      stability_ = other.stability_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeechRecognitionResult Clone() {
      return new SpeechRecognitionResult(this);
    }

    /// <summary>Field number for the "transcript" field.</summary>
    public const int TranscriptFieldNumber = 1;
    private string transcript_ = "";
    /// <summary>
    /// *Output-only* Transcript text representing the words that the user spoke.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Transcript {
      get { return transcript_; }
      set {
        transcript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stability" field.</summary>
    public const int StabilityFieldNumber = 2;
    private float stability_;
    /// <summary>
    /// *Output-only* An estimate of the likelihood that the Assistant will not
    /// change its guess about this result. Values range from 0.0 (completely
    /// unstable) to 1.0 (completely stable and final). The default of 0.0 is a
    /// sentinel value indicating `stability` was not set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Stability {
      get { return stability_; }
      set {
        stability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeechRecognitionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeechRecognitionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transcript != other.Transcript) return false;
      if (Stability != other.Stability) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Transcript.Length != 0) hash ^= Transcript.GetHashCode();
      if (Stability != 0F) hash ^= Stability.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Transcript.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Transcript);
      }
      if (Stability != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Stability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Transcript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Transcript);
      }
      if (Stability != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeechRecognitionResult other) {
      if (other == null) {
        return;
      }
      if (other.Transcript.Length != 0) {
        Transcript = other.Transcript;
      }
      if (other.Stability != 0F) {
        Stability = other.Stability;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Transcript = input.ReadString();
            break;
          }
          case 21: {
            Stability = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// *Required* Fields that identify the device to the Assistant.
  ///
  /// See also:
  ///
  /// *   [Register a Device - REST API](https://developers.google.com/assistant/sdk/reference/device-registration/register-device-manual)
  /// *   [Device Model and Instance Schemas](https://developers.google.com/assistant/sdk/reference/device-registration/model-and-instance-schemas)
  /// *   [Device Proto](https://developers.google.com/assistant/sdk/reference/rpc/google.assistant.devices.v1alpha2#device)
  /// </summary>
  public sealed partial class DeviceConfig : pb::IMessage<DeviceConfig> {
    private static readonly pb::MessageParser<DeviceConfig> _parser = new pb::MessageParser<DeviceConfig>(() => new DeviceConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceConfig(DeviceConfig other) : this() {
      deviceId_ = other.deviceId_;
      deviceModelId_ = other.deviceModelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceConfig Clone() {
      return new DeviceConfig(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    /// <summary>
    /// *Required* Unique identifier for the device. The id length must be 128
    /// characters or less. Example: DBCDW098234. This MUST match the device_id
    /// returned from device registration. This device_id is used to match against
    /// the user's registered devices to lookup the supported traits and
    /// capabilities of this device. This information should not change across
    /// device reboots. However, it should not be saved across
    /// factory-default resets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_model_id" field.</summary>
    public const int DeviceModelIdFieldNumber = 3;
    private string deviceModelId_ = "";
    /// <summary>
    /// *Required* Unique identifier for the device model. The combination of
    /// device_model_id and device_id must have been previously associated through
    /// device registration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModelId {
      get { return deviceModelId_; }
      set {
        deviceModelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (DeviceModelId != other.DeviceModelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (DeviceModelId.Length != 0) hash ^= DeviceModelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (DeviceModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceModelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (DeviceModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceConfig other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.DeviceModelId.Length != 0) {
        DeviceModelId = other.DeviceModelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 26: {
            DeviceModelId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response returned to the device if the user has triggered a Device
  /// Action. For example, a device which supports the query *Turn on the light*
  /// would receive a `DeviceAction` with a JSON payload containing the semantics
  /// of the request.
  /// </summary>
  public sealed partial class DeviceAction : pb::IMessage<DeviceAction> {
    private static readonly pb::MessageParser<DeviceAction> _parser = new pb::MessageParser<DeviceAction>(() => new DeviceAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAction(DeviceAction other) : this() {
      deviceRequestJson_ = other.deviceRequestJson_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceAction Clone() {
      return new DeviceAction(this);
    }

    /// <summary>Field number for the "device_request_json" field.</summary>
    public const int DeviceRequestJsonFieldNumber = 1;
    private string deviceRequestJson_ = "";
    /// <summary>
    /// JSON containing the device command response generated from the triggered
    /// Device Action grammar. The format is given by the
    /// `action.devices.EXECUTE` intent for a given
    /// [trait](https://developers.google.com/assistant/sdk/reference/traits/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceRequestJson {
      get { return deviceRequestJson_; }
      set {
        deviceRequestJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceRequestJson != other.DeviceRequestJson) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceRequestJson.Length != 0) hash ^= DeviceRequestJson.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceRequestJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceRequestJson);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceRequestJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceRequestJson);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceAction other) {
      if (other == null) {
        return;
      }
      if (other.DeviceRequestJson.Length != 0) {
        DeviceRequestJson = other.DeviceRequestJson;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DeviceRequestJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// There are three sources of locations. They are used with this precedence:
  ///
  /// 1. This `DeviceLocation`, which is primarily used for mobile devices with
  ///    GPS .
  /// 2. Location specified by the user during device setup; this is per-user, per
  ///    device. This location is used if `DeviceLocation` is not specified.
  /// 3. Inferred location based on IP address. This is used only if neither of the
  ///    above are specified.
  /// </summary>
  public sealed partial class DeviceLocation : pb::IMessage<DeviceLocation> {
    private static readonly pb::MessageParser<DeviceLocation> _parser = new pb::MessageParser<DeviceLocation>(() => new DeviceLocation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Assistant.Embedded.V1Alpha2.EmbeddedAssistantReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceLocation(DeviceLocation other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.Coordinates:
          Coordinates = other.Coordinates.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceLocation Clone() {
      return new DeviceLocation(this);
    }

    /// <summary>Field number for the "coordinates" field.</summary>
    public const int CoordinatesFieldNumber = 1;
    /// <summary>
    /// Latitude and longitude of device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.LatLng Coordinates {
      get { return typeCase_ == TypeOneofCase.Coordinates ? (global::Google.Type.LatLng) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Coordinates;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Coordinates = 1,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coordinates, other.Coordinates)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.Coordinates) hash ^= Coordinates.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.Coordinates) {
        output.WriteRawTag(10);
        output.WriteMessage(Coordinates);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.Coordinates) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coordinates);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceLocation other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.Coordinates:
          if (Coordinates == null) {
            Coordinates = new global::Google.Type.LatLng();
          }
          Coordinates.MergeFrom(other.Coordinates);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Type.LatLng subBuilder = new global::Google.Type.LatLng();
            if (typeCase_ == TypeOneofCase.Coordinates) {
              subBuilder.MergeFrom(Coordinates);
            }
            input.ReadMessage(subBuilder);
            Coordinates = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
